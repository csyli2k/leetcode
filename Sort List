# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        def merge(l1,l2):
            res=curr=ListNode()
            while l1 and l2:
                if l1.val < l2.val:
                    curr.next=l1
                    l1=l1.next
                else:
                    curr.next=l2
                    l2=l2.next
                curr=curr.next
            if l1:
                curr.next=l1
            if l2:
                curr.next=l2
            return res.next
        
        def divide(head, tail):
            if not head:
                return head
            if head.next==tail:
                head.next=None
                return head
            
            fast=slow=head
            while fast.next != tail:
                fast=fast.next
                slow=slow.next
                if fast.next != tail:
                    fast=fast.next
            
            left= divide(head, slow)
            right=divide(slow, tail)
            return merge(left, right)
        
        return divide(head, None)
