"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        if not node:
            return 
        temp=defaultdict()
        def dfs(curr):
            if curr in temp:
                return temp[curr]
            temp[curr]= Node(curr.val)
            for n in curr.neighbors:
                temp[curr].neighbors.append(dfs(n))
            return temp[curr]
        return dfs(node)