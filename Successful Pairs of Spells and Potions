class Solution:
    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:
        m=len(spells)
        n=len(potions)
        potions.sort()
        def bnf(spell):
            l=0
            r=n
            res=0
            while l < r:
                mid=l+(r-l)//2
                if spell* potions[mid] >=success:
                    r=mid
                else:
                    l=mid+1
            return n-l
        res=[]
        for spell in spells:
            res.append(bnf(spell))
        return res                    
            