from sortedcontainers import SortedList
class Solution:
    def minimumCost(self, nums: List[int], k: int, dist: int) -> int:
        k-=1
        left_sum=sum(nums[:dist+2])
        L= SortedList(nums[1:dist+2])
        R= SortedList()

        def L2R():
            nonlocal left_sum
            x= L.pop()
            left_sum-=x
            R.add(x)
        def R2L():
            nonlocal left_sum
            x= R.pop(0)
            left_sum+=x
            L.add(x)
        
        while len(L)>k:
            L2R()
        
        res=left_sum
        for i in range(dist+2, len(nums)):
            out= nums[i-dist-1]
            if out in L:
                L.remove(out)
                left_sum-=out
            else:
                R.remove(out)
            
            in_val= nums[i]
            if in_val < L[-1]:
                L.add(in_val)
                left_sum+=in_val
            else:
                R.add(in_val)
            
            if len(L) > k:
                L2R()
            elif len(L)< k:
                R2L()
            
            res= min(res, left_sum)
        return res
