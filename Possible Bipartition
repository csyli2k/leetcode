class Solution:
    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        p=[i for i in range(n+1)]
        rank=[0]*(n+1)

        def find(x):
            while x!=p[x]:
                p[x]=p[p[x]]
                x=p[x]
            return x
        
        def union(x,y):
            p1=find(x)
            p2=find(y)

            if p1==p2:
                return True
            if rank[p1]> rank[p2]:
                p[p2]=p1
                rank[p1]+=1
            else:
                p[p1]=p2
                rank[p2]+=1
    

        adj=defaultdict(list)
        for pers, dislike in dislikes:
            adj[pers].append(dislike)
            adj[dislike].append(pers)

        for i in range(1, n+1):
            for dislike in adj[i]:
                if find(i)==find(dislike):
                    return False
                union(dislike, adj[i][0])
        return True