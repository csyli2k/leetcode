# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findFrequentTreeSum(self, root: Optional[TreeNode]) -> List[int]:
        res=defaultdict(int)
        count=0
        def dfs(curr):
            nonlocal count
            if not curr:
                return 0
            left= dfs(curr.left)
            right=dfs(curr.right)
            res[left+right+curr.val]+=1
            count= max(count, res[left+right+curr.val])
            return left+right+curr.val
        dfs(root)
        res_list=[]
        for k,v in res.items():
            if v==count:
                res_list.append(k)
        return res_list
            