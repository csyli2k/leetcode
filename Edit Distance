class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m=len(word1)
        n=len(word2)

        dp={}
        def dfs(p,q):
            if p>=m and q>=n:
                return 0
            if p>=m:
                return n-q
            if q>=n:
                return m-p
            if (p,q) in dp:
                return dp[(p,q)]
            if word1[p]==word2[q]:
                dp[(p,q)]= dfs(p+1, q+1)
            else:   
                insert= dfs(p,q+1)
                delete= dfs(p+1,q)
                replace=dfs(p+1,q+1)
                dp[(p,q)]=1+min(insert, delete, replace)
            return dp[(p,q)]
        return dfs(0,0)
                