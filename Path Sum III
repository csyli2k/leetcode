# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        res=0
        dp=defaultdict(int)
        def dfs(root, curr_value):
            nonlocal res
            if not root:
                return 
            curr_value+=root.val
            if curr_value== targetSum:
                res+=1
            res+=dp[curr_value- targetSum]
            dp[curr_value]+=1
            if root.left:
                dfs(root.left, curr_value)
            if root.right:
                dfs(root.right, curr_value)
            dp[curr_value]-=1
            
            return 
        dfs(root, 0)
        return res