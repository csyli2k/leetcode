class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        letters = {"2": "abc", "3": "def", "4": "ghi", "5": "jkl", "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"}
        res=[]
        if not digits:
            return None

        def backtracking(curr, temp):
            if len(temp)== len(digits):
                res.append("".join(temp))
                return
            
            if curr >= len(digits) or len(temp) > len(digits):
                return
            
            for char in letters[digits[curr]]:
                temp.append(char)
                backtracking(curr+1, temp)
                temp.pop()
            return
        backtracking(0,[])
        return res