# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        q=[]
        x=y=prev=None
        while q or root:
            while root:
                q.append(root)
                root=root.left
            root=q.pop()
            if prev and root.val < prev.val:
                y= root
                if x is None:
                    x=prev
                else:
                    break
            prev=root
            root=root.right
        x.val, y.val= y.val, x.val
