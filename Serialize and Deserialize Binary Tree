# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:
    def serialize(self, root):
        
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        res=""
        def dfs(curr):
            nonlocal res
            if not curr:
                res+="None,"
                return
            res+=str(curr.val)+","
            dfs(curr.left)
            dfs(curr.right)
            return
        dfs(root)
        return res

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        index=0

        def helper(temp):
            nonlocal index
            if index>=len(temp):
                return None
            if temp[index]=="None":
                index+=1
                return None
            curr= TreeNode((temp[index]))
            index+=1
            curr.left= helper(temp)
            curr.right= helper(temp)

            return curr

        temp=data.split(",")
        return helper(temp)
        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))