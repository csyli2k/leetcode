# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        temp=[]
        def dfs(curr, row, col):
            if not curr:
                return
            temp.append((col, row, curr.val))
            
            dfs(curr.left, row+1, col-1)
            dfs(curr.right, row+1, col+1)
            return

        dfs(root, 0,0)
        temp=sorted(temp)
        curr= temp[0][0]
        res=[]
        curr_col=[]
        for (col, row, value) in temp:
            if col== curr:
                curr_col.append(value)
            else:
                curr=col
                res.append(curr_col)
                curr_col=[value]
        
        if curr_col:
            res.append(curr_col)
        return res
        


        