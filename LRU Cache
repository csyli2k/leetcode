class Node:
    def __init__(self, key=None, value=None):
        self.key=key
        self.value=value
        self.prev=None
        self.next=None
class LRUCache:

    def __init__(self, capacity: int):
        self.cache={}
        self.capacity= capacity
        self.lru= Node()
        self.mru= Node()
        self.lru.next=self.mru
        self.mru.prev=self.lru
    def remove(self, node):
        prev= node.prev
        nxt= node.next

        prev.next=nxt
        nxt.prev= prev
    
    def add(self, node):
        prev=self.mru.prev
        nxt= self.mru

        node.prev=prev
        node.next=nxt

        self.mru.prev=node
        prev.next=node

    def get(self, key: int) -> int:
        if key in self.cache:
            res= self.cache[key]
            self.remove(res)
            self.add(res)
            return res.value
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(self.cache[key])
        self.cache[key]=Node(key, value)
        self.add(self.cache[key])
        
        if len(self.cache) > self.capacity:
            lru=self.lru.next
            self.remove(lru)
            self.cache.pop(lru.key)
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)